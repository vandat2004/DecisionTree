import pickle
import tkinter as tk
from tkinter import ttk, messagebox

# ------------------------
# Load model
# ------------------------
with open("mushroom_model.pkl", "rb") as f:
    tree = pickle.load(f)

def predict(tree, sample):
    if not isinstance(tree, dict):
        return tree
    feature = next(iter(tree))
    value = sample.get(feature, None)
    if value in tree[feature]:
        return predict(tree[feature][value], sample)
    else:
        return "Kh√¥ng x√°c ƒë·ªãnh"

# ------------------------
# Danh s√°ch gi√° tr·ªã (d·ªãch song ng·ªØ)
# ------------------------
odor_values = {
    "a": "a - h·∫°nh nh√¢n (almond)",
    "l": "l - h·ªìi (anise)",
    "c": "c - creosote (nh·ª±a g·ªó)",
    "y": "y - c√° (fishy)",
    "f": "f - h√¥i (foul)",
    "m": "m - m·ªëc (musty)",
    "n": "n - kh√¥ng m√πi (none)",
    "p": "p - cay (pungent)",
    "s": "s - cay n·ªìng (spicy)"
}

cap_color_values = {
    "n": "n - n√¢u (brown)",
    "b": "b - be (buff)",
    "c": "c - qu·∫ø (cinnamon)",
    "g": "g - x√°m (gray)",
    "r": "r - xanh l·ª•c (green)",
    "p": "p - h·ªìng (pink)",
    "u": "u - t√≠m (purple)",
    "e": "e - ƒë·ªè (red)",
    "w": "w - tr·∫Øng (white)",
    "y": "y - v√†ng (yellow)"
}

gill_color_values = {
    "k": "k - ƒëen (black)",
    "n": "n - n√¢u (brown)",
    "b": "b - be (buff)",
    "h": "h - chocolate",
    "g": "g - x√°m (gray)",
    "r": "r - xanh l·ª•c (green)",
    "o": "o - cam (orange)",
    "p": "p - h·ªìng (pink)",
    "u": "u - t√≠m (purple)",
    "e": "e - ƒë·ªè (red)",
    "w": "w - tr·∫Øng (white)",
    "y": "y - v√†ng (yellow)"
}

# ------------------------
# GUI
# ------------------------
root = tk.Tk()
root.title("üçÑ Mushroom Prediction")
root.geometry("400x400")
root.resizable(False, False)

frame = ttk.Frame(root, padding=20)
frame.pack(fill="both", expand=True)

title = ttk.Label(frame, text="D·ª∞ ƒêO√ÅN N·∫§M ƒÇN ƒê∆Ø·ª¢C HAY KH√îNG", font=("Arial", 14, "bold"))
title.pack(pady=10)

# Odor
ttk.Label(frame, text="M√πi (odor):").pack(anchor="w")
odor_cb = ttk.Combobox(frame, values=list(odor_values.values()), state="readonly")
odor_cb.pack(fill="x", pady=5)

# Cap color
ttk.Label(frame, text="M√†u m≈© n·∫•m (cap-color):").pack(anchor="w")
cap_cb = ttk.Combobox(frame, values=list(cap_color_values.values()), state="readonly")
cap_cb.pack(fill="x", pady=5)

# Gill color
ttk.Label(frame, text="M√†u phi·∫øn n·∫•m (gill-color):").pack(anchor="w")
gill_cb = ttk.Combobox(frame, values=list(gill_color_values.values()), state="readonly")
gill_cb.pack(fill="x", pady=5)

# H√†m x·ª≠ l√Ω
def on_predict():
    if not odor_cb.get() or not cap_cb.get() or not gill_cb.get():
        messagebox.showwarning("‚ö†Ô∏è L·ªói", "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
        return

    sample = {
        "odor": odor_cb.get().split(" - ")[0],
        "cap-color": cap_cb.get().split(" - ")[0],
        "gill-color": gill_cb.get().split(" - ")[0],
    }

    prediction = predict(tree, sample)

    if prediction == "e":
        result = "üçÑ N·∫•m ƒÉn ƒë∆∞·ª£c (Edible)"
    elif prediction == "p":
        result = "‚ò†Ô∏è N·∫•m ƒë·ªôc (Poisonous)"
    else:
        result = "‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c"

    messagebox.showinfo("K·∫øt qu·∫£ d·ª± ƒëo√°n", result)

# Button
ttk.Button(frame, text="üîÆ D·ª± ƒëo√°n", command=on_predict).pack(pady=15)

root.mainloop()